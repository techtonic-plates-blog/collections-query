//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "entry_typst_text_values")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub entry_id: Uuid,
    #[sea_orm(primary_key, auto_increment = false)]
    pub field_id: Uuid,
    pub created_at: DateTime,
    pub raw: String,
    pub rendered: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::entries::Entity",
        from = "Column::EntryId",
        to = "super::entries::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Entries,
    #[sea_orm(
        belongs_to = "super::fields::Entity",
        from = "Column::FieldId",
        to = "super::fields::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Fields,
}

impl Related<super::entries::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Entries.def()
    }
}

impl Related<super::fields::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Fields.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "super::entries::Entity")]
    Entries,
    #[sea_orm(entity = "super::fields::Entity")]
    Fields,
}
