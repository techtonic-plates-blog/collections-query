//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "entries")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub created_at: DateTime,
    pub created_by: Uuid,
    pub collection_id: Uuid,
    pub name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::collections::Entity",
        from = "Column::CollectionId",
        to = "super::collections::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Collections,
    #[sea_orm(has_many = "super::entry_boolean_values::Entity")]
    EntryBooleanValues,
    #[sea_orm(has_many = "super::entry_date_time_values::Entity")]
    EntryDateTimeValues,
    #[sea_orm(has_many = "super::entry_number_list_values::Entity")]
    EntryNumberListValues,
    #[sea_orm(has_many = "super::entry_number_values::Entity")]
    EntryNumberValues,
    #[sea_orm(has_many = "super::entry_object_values::Entity")]
    EntryObjectValues,
    #[sea_orm(has_many = "super::entry_text_list_values::Entity")]
    EntryTextListValues,
    #[sea_orm(has_many = "super::entry_text_values::Entity")]
    EntryTextValues,
    #[sea_orm(has_many = "super::entry_typst_text_values::Entity")]
    EntryTypstTextValues,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::CreatedBy",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<super::collections::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Collections.def()
    }
}

impl Related<super::entry_boolean_values::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EntryBooleanValues.def()
    }
}

impl Related<super::entry_date_time_values::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EntryDateTimeValues.def()
    }
}

impl Related<super::entry_number_list_values::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EntryNumberListValues.def()
    }
}

impl Related<super::entry_number_values::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EntryNumberValues.def()
    }
}

impl Related<super::entry_object_values::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EntryObjectValues.def()
    }
}

impl Related<super::entry_text_list_values::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EntryTextListValues.def()
    }
}

impl Related<super::entry_text_values::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EntryTextValues.def()
    }
}

impl Related<super::entry_typst_text_values::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EntryTypstTextValues.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "super::collections::Entity")]
    Collections,
    #[sea_orm(entity = "super::entry_boolean_values::Entity")]
    EntryBooleanValues,
    #[sea_orm(entity = "super::entry_date_time_values::Entity")]
    EntryDateTimeValues,
    #[sea_orm(entity = "super::entry_number_list_values::Entity")]
    EntryNumberListValues,
    #[sea_orm(entity = "super::entry_number_values::Entity")]
    EntryNumberValues,
    #[sea_orm(entity = "super::entry_object_values::Entity")]
    EntryObjectValues,
    #[sea_orm(entity = "super::entry_text_list_values::Entity")]
    EntryTextListValues,
    #[sea_orm(entity = "super::entry_text_values::Entity")]
    EntryTextValues,
    #[sea_orm(entity = "super::entry_typst_text_values::Entity")]
    EntryTypstTextValues,
    #[sea_orm(entity = "super::users::Entity")]
    Users,
}
